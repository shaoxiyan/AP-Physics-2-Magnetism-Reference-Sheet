%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.2 (Build 18C54) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 215 176
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 215 176
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SCPXLU+TimesNewRomanPSMT
%!FontType1-1.0: SCPXLU+TimesNewRomanPSMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /SCPXLU+TimesNewRomanPSMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1164 1 index div -628 2 index div 4096 3 index div 2062 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000007DA6670676D0000000000000878000005B1676C79660000000000000E2C000008E66865616400000000000017140000003668686561000000000000174C00000024686D74780000000000001770000000186C6F636100000000000017880000000E6D6178700000000000001798000000207072657000000000000017B800000F45058E0000054C001F054C001C0394001B0000FFE10000FFE40000FFE8FE4AFFFC056B0023FE6AFFE00313000000AD000000AD0000000000250096009F002400F0013100C200C0004A00A6004100500094004700CF00AF000E007901CB00040023004400A80025011F0002004600170105009900D9005C007200E500E00028004B00DE011200240045007000160039FFE90016004B0088FFB900D9000A004300AE00BA016C0153002F00430048022C012B0025008FFFC000170028FFCDFFD80025009D00E50124FFB10048009D00E600110027007F00910012006A00CAFFFC00000024006200A7017C01E900210060008B0434048AFF6B003B00B500D5014BFF6B004D007905D809B5006C009100A3011701C0FFDFFFE700BE04010065007F00820088009900B200C0022E034305A000200026003D004E00610065007B00D9011301310340FF27FF42FF99004E00A700F2022B02C603070011002B0049005F008D00A100AF00D600E400F5010B0135019D01AB01AB01D101EE05D80000004B0075007A0080009D00A600A700AC00B9013101310217021700020017002900550080008F00A500B200B300D0014B015901C001C103A50530FE3FFF14FF15FFE7FFFF002A00580099009F00C100E400F40130015901AB01AB03220374041E04740532FD81004D0064009C00D000D100D600DE00E500F500F8012A012A01E1027E027FFF57FFA8FFE500000008001F00380051005A006F0076007700A200C000C200C400F101FB0209027E02CF04C5057A05F0FF92001200260042004B004F005100530064008B00AE00B200B800B800D600F50111012001310138014E01520167018F019601B801D901D902060221027102EA03B003CB03DC04360505FF3A00120016001E001F002300570068006C007E0088009200A500A800C500C901150126012D013001D601D901F6023B0244024402A302CF02DE0385038F04FC0586FEE0FEEBFEFBFF8A0007004400470058007500AA00E400EF011601200129016A017301E3027E029002B4030E0310032303350341035403590388039403C803CE047204AB04DA0549056105AB0761FE6EFED1FF4BFF84000000010006001E0027002C0034003700620066006A006B006C007000700072007C0081008A008E0091009200A000AB00B800BF00C900D500DD00EC00F40100012101300169016A016D017C0185018E018E









00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/N 1 def
/S 2 def
/i 3 def
/acute 4 def
/glyph3379 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1164 -628 4096 2062}def
/UniqueID 4291674 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA0D9B4A24FA5ACDC1FD41F12AFFBAE7A3DBDDC319F35270FF36565A1289F8937C19B5ACE5BE7001E5194837A27A42E44AD9559003984FF40701411A3AA3D52529122075CCE9BA9C6842C6A1BBA296F0AB09AFAEF93A90272FB4BEB6F3C4C0F327EDA4DDA5ECDEAC23AEEE2A6CCA5D819AB3BE2C6A9C2A9D0F7C577FB288784F1513700BDC3E48AE10998E8D38F0269D76A907A8898D11167455FA74BEB2397594274458A2E01513A364FD9C19C739990A19BFFBA4543A251FE6BABAC0E24F51918ADB3D639F87E772417C164CE6187DBD0D3AE469F0814A2E219BDA9488A3296AEFC463998BA2A709B4D84743E64BD754C4D8510B3F78EF9748AEB7A3357B9DF0826CBF979677AA544C2379245C2DB026EAB723929DA64AB2043C4E40D52D7201B8140D4A266C15470695E2306830D6158A2198E94192AE6CE31D373821809488ED3A255DC399B5F5B23845432C0652627B389DFFCBAAD962609ADFEE2BBCF02201EA9E68247B45AFEF35ED40BB8C739A5BBBF37F276CF49C7B2204F67DE5A4F926497E9C277BC856080BD9F2FE1CF9A2356591916247182C2C329C0A7EA04ED72C9DACD870EB12A5F9209623125600C6090CF50E1FE801BC296F3667B91B1BFBB0656A0D6A4814957A372CD657D9F5EA8D605DE46FF0401F39E437C318EA6E57D96B3C6BC7F8DBFF0D60F0C49ADA516F275E320C2BBCD7A4A50C6420524BF810FD8AA4BC86D6EC26ABE87B2F00E1151884C65C263DC441D372385784B762E5068C3693ECAA5FD89EDFA83E3151BD64DF66DDE
A17E685A6B191CE49CE579F23CD5554BB64F4C3A768327732C23C06064FA29E84CD629D495E733FC1AAFEAFA3152C91A12F6C391259829B1E171C3AF47C8C8925B9DA53B54789C319CCF57BB6459BB2916F3CCD2029EE2FC669FD1721D0DAFA8AAF367414A0C2B4D29B0D817D3FE2307ABB9F952779DD9854040CE80FD20EBF6E2895973450C123964CD9CCEFA84920C9ED6DE5D6AA6215C48358DC017D2524961A9F597D36BA11B9812F29EB01D6DC242B4C4963A03A739B7559EF5E6D4C6949B5A9A73EADF6437D45E75F4B1B72A0C4FAA955EEE683242556D1945497D59D81BE399BDD7DAB0DCFF5B244C69080DD6C9BB6AC0B1058148584A3F1922DEC11D984825CE8D5E47215C03F528085DA332FF9C4EA48EDC3988D09A559EE9C088D944A3CDA1368DEEDCEAF9C89AE71205C03137FF172837F952B27D3E6568CADF366A920EBE82A8C061A5E4BC1A4865A0F6A901C014CCC6521CDD7B2A5EA46A5A3BA9523067612424C2E4EFCBD96C9C260E8BAE97BD8DA1275B222ACFE51AEA84A2B4A6408EEA8611D0D4EBBFA2804171F1681BB307B4EFF6176C75C6A784AA827B7D1628A4D0D8CEBA1426EC46B24EE3CB2FDC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SCPXLU+TimesNewRomanPSMT cguidfix
/F1.1/SCPXLU+TimesNewRomanPSMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
-373 1117 m
-373 -80 l
509 -80 l
509 1117 l
-373 1117 l
h
W
0 0 215 176 rc
-378 1122 m
514 1122 l
514 -85 l
-378 -85 l
h
f
Q
q
215.89999 -23.6 m
-309.89999 -23.6 l
-309.89999 193 l
215.89999 193 l
215.89999 -23.6 l
h
W
0 0 215 176 rc
-314.89999 198 m
220.89999 198 l
220.89999 -28.6 l
-314.89999 -28.6 l
h
f
Q
1.7569444 w
1 j
0 0.67843139 0.93725491 sc
q
0 0 215 176 rc
1 0 0 -1 1.3 173 cm
0.1 101 m
12.2 93.300003 31.200001 89.099998 51.900002 87 c
214.10001 101.5 m
202.89999 93.5 184.2 89.099998 163.39999 86.900002 c
163.5 78.300003 m
191 70.699997 209.3 57.200001 209.3 42.400002 c
209.3 19 163.8 0 107.7 0 c
51.599998 0 6.0999999 19 6.0999999 42.400002 c
6.0999999 57.200001 24.299999 70.199997 51.900002 77.800003 c
51.700001 73.900002 m
36.400002 67.800003 27 60.599998 27 51.099998 c
27 32.5 63.099998 17.4 107.7 17.4 c
152.3 17.4 188.5 32.5 188.5 51.099998 c
188.5 60.700001 178.7 67.900002 163.10001 74.099998 c
159.10001 69.900002 m
162 66.800003 163.8 63.299999 163.8 59.799999 c
163.8 46 138.60001 34.799999 107.7 34.799999 c
76.699997 34.799999 51.599998 46 51.599998 59.799999 c
51.599998 63.200001 53.099998 66.5 56 69.5 c
0 68.599998 m
12.2 76.300003 31.200001 80.400002 52 82.5 c
213.39999 68.099998 m
202.3 76.099998 183.89999 80.300003 163.5 82.5 c
163.3 91.599998 m
190.89999 99.199997 209.3 112.4 209.3 127.2 c
209.3 150.7 163.8 169.60001 107.7 169.60001 c
51.599998 169.60001 6.0999999 150.7 6.0999999 127.2 c
6.0999999 112.4 24.299999 99.300003 51.900002 91.800003 c
52.200001 95.300003 m
36.700001 101.5 27 108.9 27 118.5 c
27 137.10001 63.099998 152.2 107.7 152.2 c
152.3 152.2 188.5 137.10001 188.5 118.5 c
188.5 108.9 177.39999 100.1 163.5 95.5 c
159.3 100 m
162.2 103 163.8 106.3 163.8 109.8 c
163.8 123.6 138.60001 134.8 107.7 134.8 c
76.699997 134.8 51.599998 123.6 51.599998 109.8 c
51.599998 106.5 52.599998 102.9 55.200001 100.5 c
S
Q
q
191.60001 95.099998 m
191.39999 96 191.60001 97 192 97.800003 c
189.5 95.800003 186.2 94.599998 184 93.699997 c
186.3 93.699997 189.89999 93.699997 192.89999 92.699997 c
192.3 93.400002 191.7 94.199997 191.60001 95.099998 c
h
W
0 0 215 176 rc
179 102.8 m
197.89999 102.8 l
197.89999 87.699997 l
179 87.699997 l
h
f
Q
q
192.10001 81.599998 m
192.3 82.5 192.89999 83.300003 193.5 83.900002 c
190.5 83 186.89999 83.099998 184.60001 83.099998 c
186.7 82.199997 190 80.900002 192.5 78.800003 c
192.2 79.699997 192 80.699997 192.10001 81.599998 c
h
W
0 0 215 176 rc
179.60001 88.900002 m
198.5 88.900002 l
198.5 73.800003 l
179.60001 73.800003 l
h
f
Q
q
26.6 94.699997 m
26.9 95.599998 27.5 96.300003 28.200001 97 c
25.1 96.199997 21.5 96.5 19.200001 96.699997 c
21.299999 95.599998 24.5 94.199997 26.799999 91.900002 c
26.5 92.800003 26.4 93.800003 26.6 94.699997 c
26.6 94.699997 l
h
W
0 0 215 176 rc
14.2 102 m
33.200001 102 l
33.200001 86.900002 l
14.2 86.900002 l
h
f
Q
q
27.6 82 m
27.299999 82.900002 27.5 83.800003 27.799999 84.699997 c
25.4 82.5 22.200001 81 20.1 80 c
22.4 80.199997 26 80.5 29.1 79.699997 c
28.4 80.300003 27.799999 81.099998 27.6 82 c
h
W
0 0 215 176 rc
15.1 89.699997 m
34.099998 89.699997 l
34.099998 74.699997 l
15.1 74.699997 l
h
f
Q
q
105.8 172.89999 m
105.8 172 105.4 171.10001 104.9 170.3 c
107.7 171.89999 111.2 172.5 113.5 172.89999 c
111.2 173.39999 107.7 174 104.9 175.5 c
105.4 174.7 105.8 173.8 105.8 172.89999 c
h
W
0 0 215 176 rc
99.900002 180.5 m
118.5 180.5 l
118.5 165.3 l
99.900002 165.3 l
h
f
Q
q
105.8 155.5 m
105.8 154.60001 105.4 153.7 104.9 152.89999 c
107.7 154.5 111.2 155.10001 113.5 155.5 c
111.2 156 107.7 156.60001 104.9 158.10001 c
105.4 157.3 105.8 156.5 105.8 155.5 c
h
W
0 0 215 176 rc
99.900002 163.10001 m
118.5 163.10001 l
118.5 147.89999 l
99.900002 147.89999 l
h
f
Q
q
105.8 138.10001 m
105.7 137.10001 105.4 136.3 104.9 135.5 c
107.7 137 111.2 137.60001 113.5 138.10001 c
111.2 138.5 107.7 139.10001 104.9 140.7 c
105.4 139.89999 105.8 139 105.8 138.10001 c
h
W
0 0 215 176 rc
99.900002 145.7 m
118.5 145.7 l
118.5 130.5 l
99.900002 130.5 l
h
f
Q
q
105.8 38.200001 m
105.8 37.299999 105.4 36.400002 104.9 35.599998 c
107.7 37.200001 111.2 37.799999 113.5 38.200001 c
111.2 38.700001 107.7 39.299999 104.9 40.799999 c
105.4 40 105.8 39.099998 105.8 38.200001 c
h
W
0 0 215 176 rc
99.900002 45.799999 m
118.5 45.799999 l
118.5 30.6 l
99.900002 30.6 l
h
f
Q
q
105.8 20.700001 m
105.8 19.799999 105.4 18.9 104.9 18.1 c
107.7 19.6 111.2 20.299999 113.5 20.700001 c
111.2 21.200001 107.7 21.799999 104.9 23.299999 c
105.4 22.5 105.8 21.6 105.8 20.700001 c
h
W
0 0 215 176 rc
99.900002 28.299999 m
118.5 28.299999 l
118.5 13.1 l
99.900002 13.1 l
h
f
Q
q
105.8 3.3 m
105.8 2.4000001 105.4 1.5 104.9 0.69999999 c
107.7 2.3 111.2 2.9000001 113.5 3.4000001 c
111.2 3.8 107.7 4.4000001 104.9 5.9000001 c
105.4 5.1999998 105.8 4.3000002 105.8 3.3 c
105.8 3.3 l
h
W
0 0 215 176 rc
99.900002 10.9 m
118.5 10.9 l
118.5 -4.3000002 l
99.900002 -4.3000002 l
h
f
Q
0.94117647 0.88235295 0.89803922 sc
q
164.60001 73 m
53.099998 73 l
53.099998 103.5 l
164.60001 103.5 l
164.60001 73 l
h
W
0 0 215 176 rc
48.099998 108.5 m
169.60001 108.5 l
169.60001 68 l
48.099998 68 l
h
f
Q
0.99305564 w
[
10
5
] 0 d
1 1 1 sc
q
0 0 215 176 rc
1 0 0 -1 52.799999 99.300003 cm
111.8 0 m
104.6 2.5999999 63.5 2 55.299999 2 c
47.200001 2 7.4000001 2.5999999 0.2 0 c
112 4.5999999 m
105.3 6.5999999 62.900002 5.8000002 55.299999 5.8000002 c
47.700001 5.8000002 6.9000001 6.3000002 0.30000001 4.3000002 c
111.9 8.6999998 m
107.8 8.6999998 58.900002 9.3000002 55.299999 9.3000002 c
51.700001 9.3000002 4 8.8000002 0 8.8000002 c
112 21.799999 m
104.1 19.9 63.5 20.299999 55.299999 20.299999 c
47.200001 20.299999 7.8000002 20.1 0.2 21.799999 c
111.8 17.799999 m
105.2 15.8 62.900002 17 55.299999 17.5 c
47.700001 17 6.9000001 15.6 0.30000001 17.700001 c
111.8 12.9 m
107.8 12.9 58.900002 13.1 55.299999 13.1 c
51.700001 13.1 4.4000001 13 0.30000001 13 c
S
1.375 w
1 0 0 -1 56.5 103.3 cm
94.199997 1.8 m
80 3 54.799999 2.7 51.599998 2.7 c
47.299999 2.7 5.5 3 0.80000001 0 c
94.5 28.6 m
80 27.5 54.799999 27.9 51.599998 27.9 c
47.299999 27.9 4.8000002 27.700001 0 30.799999 c
S
1.7569444 w
0.42352942 0.81176472 0.96470588 sc
1 0 0 -1 57.299999 103.3 cm
93.400002 1.8 m
79.199997 3 54 2.7 50.799999 2.7 c
46.5 2.7 4.6999998 3 0 0 c
S
1.375 w
1 1 1 sc
1 0 0 -1 155.60001 103.1 cm
4.5 0 m
3.8 0.40000001 2.2 0.80000001 0 1.1 c
5 30 m
4.1999998 29.5 2.5 29.1 0.1 28.799999 c
S
1.7569444 w
0.42352942 0.81176472 0.96470588 sc
1 0 0 -1 52.799999 103.1 cm
107.3 0 m
106.6 0.40000001 105 0.80000001 102.8 1.1 c
111.8 3.8 m
104.6 6.4000001 63.5 5.8000002 55.299999 5.8000002 c
47.200001 5.8000002 7.4000001 6.4000001 0.2 3.8 c
112 8.3999996 m
105.3 10.4 62.900002 9.6000004 55.299999 9.6000004 c
47.700001 9.6000004 6.9000001 10.1 0.30000001 8.1000004 c
111.9 12.5 m
107.8 12.5 58.900002 13.1 55.299999 13.1 c
51.700001 13.1 4 12.6 0 12.6 c
98.199997 28.4 m
83.699997 27.299999 58.5 27.700001 55.299999 27.700001 c
51 27.700001 8.5 27.5 3.7 30.6 c
107.8 30 m
107 29.5 105.3 29.1 102.9 28.799999 c
112 25.6 m
104.1 23.700001 63.5 24.1 55.299999 24.1 c
47.200001 24.1 7.8000002 23.9 0.2 25.6 c
111.8 21.6 m
105.2 19.6 62.900002 20.799999 55.299999 21.299999 c
47.700001 20.799999 6.9000001 19.4 0.30000001 21.5 c
111.8 16.700001 m
107.8 16.700001 58.900002 16.9 55.299999 16.9 c
51.700001 16.9 4.4000001 16.799999 0.30000001 16.799999 c
S
0.55000001 w
[] 0 d
0.50196081 0.50980395 0.51764709 sc
1 0 0 -1 53.099998 103.5 cm
0 30.5 m
111.5 30.5 l
111.5 0 l
0 0 l
0 30.5 l
h
S
Q
q
59.799999 93.5 m
65.199997 93.199997 l
65.199997 93.800003 l
64.5 94.199997 l
63.799999 94.400002 l
59.900002 94.599998 l
59.799999 93.5 l
59.799999 93.5 l
h
W
0 0 215 176 rc
54.799999 99.599998 m
70.199997 99.599998 l
70.199997 88.199997 l
54.799999 88.199997 l
h
f
Q
q
59.799999 89.800003 m
68.199997 89.699997 l
68.199997 90.300003 l
68 90.699997 l
67.900002 90.900002 l
59.799999 91 l
59.799999 89.800003 l
59.799999 89.800003 l
h
W
0 0 215 176 rc
54.799999 96 m
73.199997 96 l
73.199997 84.699997 l
54.799999 84.699997 l
h
f
Q
q
59 82.900002 m
59.099998 81.599998 l
64.699997 81.800003 l
65.300003 82.199997 l
65.800003 82.5 l
66.699997 83.300003 l
59 82.900002 l
59 82.900002 l
h
W
0 0 215 176 rc
54 88.300003 m
71.699997 88.300003 l
71.699997 76.599998 l
54 76.599998 l
h
f
Q
q
59.5 85.599998 m
67.900002 85.599998 l
68 86.900002 l
59.5 86.900002 l
59.5 85.599998 l
h
W
0 0 215 176 rc
54.5 91.900002 m
73 91.900002 l
73 80.599998 l
54.5 80.599998 l
h
f
Q
0.73725492 0.90196079 0.98431373 sc
q
59.400002 93.199997 m
68.599998 92.800003 l
68.699997 94.5 l
59.400002 95 l
59.400002 93.199997 l
h
W
0 0 215 176 rc
54.400002 100 m
73.699997 100 l
73.699997 87.800003 l
54.400002 87.800003 l
h
f
Q
1 1 1 sc
q
159.3 94.599998 m
155.39999 94.400002 l
155.5 93.099998 l
161.60001 93.5 l
160.8 94.099998 l
160 94.400002 l
159.3 94.599998 l
159.3 94.599998 l
h
W
0 0 215 176 rc
150.39999 99.599998 m
166.60001 99.599998 l
166.60001 88.099998 l
150.39999 88.099998 l
h
f
Q
q
163.3 91.199997 m
155.5 91.099998 l
155.5 89.800003 l
163.39999 89.900002 l
163.3 91.199997 l
h
W
0 0 215 176 rc
150.5 96.199997 m
168.39999 96.199997 l
168.39999 84.800003 l
150.5 84.800003 l
h
f
Q
q
155.5 82.900002 m
155.39999 81.599998 l
159.3 82.199997 158.89999 80.400002 161.8 82.699997 c
158.5 82.900002 l
155.5 82.900002 l
h
W
0 0 215 176 rc
150.39999 87.900002 m
166.8 87.900002 l
166.8 76.490143 l
150.39999 76.490143 l
h
f
Q
q
155.3 87 m
155.3 85.699997 l
163.39999 85.699997 l
163.3 87 l
155.3 87 l
h
W
0 0 215 176 rc
150.3 92 m
168.39999 92 l
168.39999 80.699997 l
150.3 80.699997 l
h
f
Q
0.73725492 0.90196079 0.98431373 sc
q
163.5 95.400002 m
159.5 94.900002 l
155.2 94.599998 l
155.3 92.800003 l
159.39999 93.099998 l
163.60001 93.5 l
163.5 95.400002 l
163.5 95.400002 l
h
W
0 0 215 176 rc
150.2 100.4 m
168.60001 100.4 l
168.60001 87.800003 l
150.2 87.800003 l
h
f
Q
q
59.200001 89.5 m
68.400002 89.400002 l
68.400002 91.300003 l
59.200001 91.400002 l
59.200001 89.5 l
h
W
0 0 215 176 rc
54.200001 96.400002 m
73.400002 96.400002 l
73.400002 84.400002 l
54.200001 84.400002 l
h
f
Q
q
163.5 91.5 m
155.2 91.5 l
155.3 89.599998 l
163.5 89.699997 l
163.5 91.5 l
163.5 91.5 l
h
W
0 0 215 176 rc
150.2 96.5 m
168.5 96.5 l
168.5 84.599998 l
150.2 84.599998 l
h
f
Q
q
58.700001 83.199997 m
58.700001 82.699997 58.900002 81.5 58.900002 81.5 c
68.5 81.800003 l
68.5 83.599998 l
68.5 83.599998 59.200001 83.400002 58.700001 83.199997 c
58.700001 83.199997 l
h
W
0 0 215 176 rc
53.700001 88.599998 m
73.5 88.599998 l
73.5 76.5 l
53.700001 76.5 l
h
f
Q
q
155.3 83.300003 m
155.2 81.5 l
155.2 81.5 157.7 81.5 158.89999 81.300003 c
160.2 81.199997 163.5 80.900002 163.5 80.900002 c
163.5 82.699997 l
163.5 82.699997 161.5 82.900002 159.89999 83.099998 c
158.3 83.199997 155.3 83.300003 155.3 83.300003 c
h
W
0 0 215 176 rc
150.2 88.300003 m
168.5 88.300003 l
168.5 75.900002 l
150.2 75.900002 l
h
f
Q
q
59.099998 85.300003 m
68.400002 85.400002 l
68.400002 87.199997 l
59.200001 87.199997 l
59.099998 85.300003 l
59.099998 85.300003 l
h
W
0 0 215 176 rc
54.099998 92.199997 m
73.400002 92.199997 l
73.400002 80.300003 l
54.099998 80.300003 l
h
f
Q
q
155.10001 87.300003 m
155.10001 85.5 l
163.60001 85.400002 l
163.5 87.300003 l
155.10001 87.300003 l
155.10001 87.300003 l
h
W
0 0 215 176 rc
150.10001 92.300003 m
168.60001 92.300003 l
168.60001 80.400002 l
150.10001 80.400002 l
h
f
Q
/Cs2 SC
0 sc
q
0 0 215 176 rc
1 0 0 -1 56 98 cm
/F1.1[ 13.75 0 0 -13.75 0 0]sf
0 12 m
(!)s
1 0 0 -1 153 98 cm
0 12 m
(")s
ep
end
